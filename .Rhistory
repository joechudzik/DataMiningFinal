library(igraph)
library(readtext)
library(tidyverse)
library(tnet)
library(cluster)    # clustering algorithms
library(readxl)
#library(mallet)
library(NLP)
library(tm)
library(SnowballC)
library(topicmodels)
library(tidyr)
library(tidytext)
library(dplyr)
library(ggplot2)
library(scales)
library(broom)
emailEdges <-  read.csv("./data/DupontWangChudzik2-dataset.csv", stringsAsFactors = FALSE)
emailEdges <-  read.csv("../data/DupontWangChudzik2-dataset.csv", stringsAsFactors = FALSE)
emailEdges <-  read.csv("./data/DupontWangChudzik2-dataset.csv", stringsAsFactors = FALSE)
pwd
emailEdges <-  read.csv("./data/DupontWangChudzik2-dataset.csv", stringsAsFactors = FALSE)
emailAttributes <- read.csv("./data/DupontWangChudzik1-dataset.csv", stringsAsFactors = FALSE)
network.df <- read.csv('./data/DupontWangChudzik3-dataset.csv"', stringsAsFactors = FALSE)
emails.df <- read.csv('./data/DupontWangChudzik4-dataset.csv"', stringsAsFactors = FALSE)
stopwords.df <- read.table('./data/stopwords_en.txt', stringsAsFactors = FALSE)
stopwords.df <- read.table('./data/DupontWangChudzik5-dataset.txt', stringsAsFactors = FALSE)
###########################################################################
#   Centrality Distributions, Edge weight distributions
###########################################################################
V(network.directed)$indegree <- degree(network.directed, mode = c("in"))
network.directed <- graph.data.frame(emailEdges, directed = TRUE)
#Coll
#Collapse network edges into weights
E(network.directed)$weight <- 1
network.directed.weighted <- igraph::simplify(network.directed, edge.attr.comb=list(weight='sum', email= 'concat', 'ignore'))
# centrality metrics =
V(network.directed)$degree                <- degree(network.directed)
V(network.directed)$betweenness           <- betweenness(network.directed, weights = NULL)
V(network.directed)$indegree <- degree(network.directed, mode = c("in"))
V(network.directed)$outdegree <- degree(network.directed, mode = c("out"))
sendersOnly = subset(V(network.directed), V(network.directed)$indegree == 0)
recipientsOnly = subset(V(network.directed), V(network.directed)$outdegree == 0)
degreeHistogram <- as.data.frame(table(V(network.directed.weighted)$degree))
degreeHistogram$Var1 <- as.numeric(levels(degreeHistogram$Var1))[degreeHistogram$Var1]
ggplot(degreeHistogram, aes(x=Var1, y=Freq)) + geom_point() +
scale_x_log10(breaks=c(0,1,2,5,10,20,50,100,200,500)) + scale_y_log10(breaks=c(0,1,5,10,50,100,500,750)) +
xlab('Degree') + ylab('Frequency') + ggtitle('Degree Distribution') + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
E(network.directed)$weight <- 1
network.directed.weighted <- igraph::simplify(network.directed, edge.attr.comb=list(weight='sum', email= 'concat', 'ignore'))
# centrality metrics =
V(network.directed)$degree                <- degree(network.directed)
V(network.directed)$betweenness           <- betweenness(network.directed, weights = NULL)
V(network.directed.weighted)$degree       <- degree(network.directed.weighted)
V(network.directed.weighted)$strength     <- strength(network.directed.weighted)
V(network.directed.weighted)$betweenness  <- betweenness(network.directed.weighted, weights = NULL)
V(network.directed.weighted)$indegree     <- degree(network.directed.weighted, mode = c("in"))
V(network.directed.weighted)$outdegree    <- degree(network.directed.weighted, mode = c("out"))
#Top 10 most central nodes (#4 will shock you)
top10Degree <- head(order(V(network.directed.weighted)$degree, decreasing = TRUE), n = 10)
top10Strength <- head(order(V(network.directed.weighted)$strength, decreasing = TRUE), n = 10)
top10Betweenness <- head(order(V(network.directed.weighted)$betweenness, decreasing = TRUE), n = 10)
top10DegreeVertices <- V(network.directed.weighted)$name[top10Degree]
top10StrengthVertices <- V(network.directed.weighted)$name[top10Strength]
top10BetweennessVertices <- V(network.directed.weighted)$name[top10Betweenness]
top10CentralityIndices <- unique(c(top10Degree, top10Strength, top10Betweenness))
top10MetricVertices <- unique(c(top10DegreeVertices, top10StrengthVertices, top10BetweennessVertices))
V(network.directed.weighted)$isTop10Degree      <- V(network.directed.weighted) %in% top10Degree
V(network.directed.weighted)$isTop10Strength    <- V(network.directed.weighted) %in% top10Strength
V(network.directed.weighted)$isTop10Betweenness <- V(network.directed.weighted) %in% top10Betweenness
V(network.directed.weighted)$isTop10Metric      <- V(network.directed.weighted) %in% top10CentralityIndices
tidy(top10DegreeVertices)
tidy(top10StrengthVertices)
tidy(top10BetweennessVertices)
##The one address in the most important nodes list with no outdegree
subset(V(network.dire
##The one address in the most important nodes list with no outdegree
subset(V(network.directed.weighted)$name[top10CentralityIndices], V(network.directed.weighted)$outdegree[top10CentralityIndices] == 0)
##The one address in the most important nodes list with no outdegree
subset(V(network.directed.weighted)$name[top10CentralityIndices], V(network.directed.weighted)$outdegree[top10CentralityIndices] == 0)
###########################################################################
#   Centrality Distributions, Edge weight distributions
###########################################################################
V(network.directed)$indegree <- degree(network.directed, mode = c("in"))
V(network.directed)$outdegree <- degree(network.directed, mode = c("out"))
sendersOnly = subset(V(network.directed), V(network.directed)$indegree == 0)
recipientsOnly = subset(V(network.directed), V(network.directed)$outdegree == 0)
degreeHistogram <- as.data.frame(table(V(network.directed.weighted)$degree))
degreeHistogram$Var1 <- as.numeric(levels(degreeHistogram$Var1))[degreeHistogram$Var1]
png(filename = 'Figure 1 - Degree Distribution.png', width = 400, height = 400)
ggplot(degreeHistogram, aes(x=Var1, y=Freq)) + geom_point() +
scale_x_log10(breaks=c(0,1,2,5,10,20,50,100,200,500)) + scale_y_log10(breaks=c(0,1,5,10,50,100,500,750)) +
xlab('Degree') + ylab('Frequency') + ggtitle('Degree Distribution') + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
strengthHistogram <- as.data.frame(table(V(network.directed.weighted)$strength))
strengthHistogram$Var1 <- as.numeric(levels(strengthHistogram$Var1))[strengthHistogram$Var1]
ggplot(strengthHistogram, aes(x=Var1, y=Freq)) + geom_point() +
scale_x_log10(breaks=c(0,1,2,5,10,20,50,100,200,500)) + scale_y_log10(breaks=c(0,1,5,10,50,100,500,750)) +
xlab('Strength') + ylab('Frequency') + ggtitle('Strength Distribution') + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
edgeWeightHistogram <- as.data.frame(table(E(network.directed.weighted)$weight))
edgeWeightHistogram$Var1 <- as.numeric(levels(edgeWeightHistogram$Var1))[edgeWeightHistogram$Var1]
ggplot(edgeWeightHistogram, aes(x=Var1, y=Freq)) + geom_point() +
scale_x_log10(breaks=c(0,1,2,5,10,20,50,100,200,500)) + scale_y_log10(breaks=c(0,1,5,10,50,100,500,750)) +
xlab('Edge Weight') + ylab('Frequency') + ggtitle('Edge Weight Distribution') + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
